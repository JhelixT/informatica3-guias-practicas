package views;

import core.estructuras.arboles.ArbolBST;
import core.utils.InputValidator;
import core.utils.MenuFormatter;

import java.util.List;
import java.util.Scanner;

/**
 * Men√∫ interactivo para demostrar las operaciones del √Årbol de B√∫squeda Binaria (BST).
 * 
 * @author JhelixT
 * @version 1.0
 */
public class ArbolBSTMenu {
    private static ArbolBST<Integer> arbol;
    private static Scanner scanner;
    
    /**
     * Muestra el men√∫ principal del BST.
     */
    public static void mostrarMenu() {
        scanner = new Scanner(System.in);
        arbol = new ArbolBST<>();
        boolean continuar = true;
        
        while (continuar) {
            mostrarOpciones();
            int opcion = InputValidator.leerEnteroEnRango("Seleccione una opci√≥n: ", 0, 15);
            System.out.println();
            
            switch (opcion) {
                case 1 -> insertarValor();
                case 2 -> buscarValor();
                case 3 -> eliminarValor();
                case 4 -> mostrarRecorridoInorden();
                case 5 -> mostrarRecorridoPreorden();
                case 6 -> mostrarRecorridoPostorden();
                case 7 -> mostrarRecorridoPorNiveles();
                case 8 -> mostrarTodosLosRecorridos();
                case 9 -> encontrarMinMax();
                case 10 -> mostrarEstadisticas();
                case 11 -> visualizarArbol();
                case 12 -> verificarValidez();
                case 13 -> insertarMultiplesValores();
                case 14 -> limpiarArbol();
                case 15 -> demostrarOperaciones();
                case 0 -> {
                    System.out.println("Volviendo al men√∫ principal...");
                    continuar = false;
                }
            }
            
            if (continuar && opcion != 0) {
                System.out.println("\nPresione Enter para continuar...");
                scanner.nextLine();
            }
        }
    }
    
    private static void mostrarOpciones() {
        MenuFormatter.limpiarPantalla();
        MenuFormatter.mostrarTituloPrincipal("√ÅRBOL DE B√öSQUEDA BINARIA (BST)");
        
        System.out.println("OPERACIONES B√ÅSICAS:");
        System.out.println("  1. Insertar valor");
        System.out.println("  2. Buscar valor");
        System.out.println("  3. Eliminar valor");
        System.out.println();
        
        System.out.println("RECORRIDOS:");
        System.out.println("  4. Recorrido Inorden (ascendente)");
        System.out.println("  5. Recorrido Preorden");
        System.out.println("  6. Recorrido Postorden");
        System.out.println("  7. Recorrido por Niveles (BFS)");
        System.out.println("  8. Mostrar todos los recorridos");
        System.out.println();
        
        System.out.println("CONSULTAS:");
        System.out.println("  9. Encontrar m√≠nimo y m√°ximo");
        System.out.println(" 10. Mostrar estad√≠sticas del √°rbol");
        System.out.println(" 11. Visualizar estructura del √°rbol");
        System.out.println(" 12. Verificar validez del BST");
        System.out.println();
        
        System.out.println("UTILIDADES:");
        System.out.println(" 13. Insertar m√∫ltiples valores");
        System.out.println(" 14. Limpiar √°rbol");
        System.out.println(" 15. Demostraci√≥n completa");
        System.out.println();
        
        System.out.println("  0. Volver al men√∫ principal");
        System.out.println();
        MenuFormatter.mostrarSeparador();
        
        // Mostrar estado actual
        if (!arbol.isEmpty()) {
            System.out.println("Estado: " + arbol.getSize() + " nodos, altura: " + arbol.getHeight());
        } else {
            System.out.println("Estado: √Årbol vac√≠o");
        }
        System.out.println();
    }
    
    private static void insertarValor() {
        System.out.println("=== INSERTAR VALOR ===\n");
        
        int valor = InputValidator.leerEntero("Ingrese el valor a insertar: ");
        
        boolean insertado = arbol.insert(valor);
        
        if (insertado) {
            System.out.println("‚úÖ Valor " + valor + " insertado correctamente");
            System.out.println("\nEstado actual del √°rbol:");
            arbol.display();
        } else {
            System.out.println("‚ùå El valor " + valor + " ya existe en el √°rbol");
            System.out.println("(El BST no permite valores duplicados)");
        }
    }
    
    private static void buscarValor() {
        System.out.println("=== BUSCAR VALOR ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        int valor = InputValidator.leerEntero("Ingrese el valor a buscar: ");
        
        boolean encontrado = arbol.search(valor);
        
        if (encontrado) {
            System.out.println("‚úÖ El valor " + valor + " S√ç existe en el √°rbol");
        } else {
            System.out.println("‚ùå El valor " + valor + " NO existe en el √°rbol");
        }
        
        System.out.println("\n√Årbol actual:");
        arbol.display();
    }
    
    private static void eliminarValor() {
        System.out.println("=== ELIMINAR VALOR ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("√Årbol actual:");
        arbol.display();
        System.out.println();
        
        int valor = InputValidator.leerEntero("Ingrese el valor a eliminar: ");
        
        boolean eliminado = arbol.delete(valor);
        
        if (eliminado) {
            System.out.println("\n‚úÖ Valor " + valor + " eliminado correctamente");
            System.out.println("\n√Årbol despu√©s de eliminar:");
            arbol.display();
        } else {
            System.out.println("\n‚ùå El valor " + valor + " no existe en el √°rbol");
        }
    }
    
    private static void mostrarRecorridoInorden() {
        System.out.println("=== RECORRIDO INORDEN (Izquierda-Ra√≠z-Derecha) ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Este recorrido visita los nodos en orden ASCENDENTE");
        System.out.println();
        
        List<Integer> resultado = arbol.inOrderTraversal();
        System.out.println("Resultado: " + resultado);
        
        System.out.println("\nEstructura del √°rbol:");
        arbol.display();
    }
    
    private static void mostrarRecorridoPreorden() {
        System.out.println("=== RECORRIDO PREORDEN (Ra√≠z-Izquierda-Derecha) ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Este recorrido visita primero la ra√≠z, luego sub√°rbol izquierdo, luego derecho");
        System.out.println();
        
        List<Integer> resultado = arbol.preOrderTraversal();
        System.out.println("Resultado: " + resultado);
        
        System.out.println("\nEstructura del √°rbol:");
        arbol.display();
    }
    
    private static void mostrarRecorridoPostorden() {
        System.out.println("=== RECORRIDO POSTORDEN (Izquierda-Derecha-Ra√≠z) ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Este recorrido visita primero los hijos, luego la ra√≠z");
        System.out.println();
        
        List<Integer> resultado = arbol.postOrderTraversal();
        System.out.println("Resultado: " + resultado);
        
        System.out.println("\nEstructura del √°rbol:");
        arbol.display();
    }
    
    private static void mostrarRecorridoPorNiveles() {
        System.out.println("=== RECORRIDO POR NIVELES (BFS) ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Este recorrido visita los nodos nivel por nivel (de arriba a abajo)");
        System.out.println();
        
        List<Integer> resultado = arbol.levelOrderTraversal();
        System.out.println("Resultado: " + resultado);
        
        System.out.println("\nEstructura del √°rbol:");
        arbol.display();
    }
    
    private static void mostrarTodosLosRecorridos() {
        System.out.println("=== TODOS LOS RECORRIDOS ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Estructura del √°rbol:");
        arbol.display();
        System.out.println();
        
        System.out.println("üìã RECORRIDOS:");
        System.out.println();
        
        System.out.println("1. Inorden (ascendente):     " + arbol.inOrderTraversal());
        System.out.println("2. Preorden:                 " + arbol.preOrderTraversal());
        System.out.println("3. Postorden:                " + arbol.postOrderTraversal());
        System.out.println("4. Por niveles (BFS):        " + arbol.levelOrderTraversal());
    }
    
    private static void encontrarMinMax() {
        System.out.println("=== ENCONTRAR M√çNIMO Y M√ÅXIMO ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        Integer min = arbol.findMinValue();
        Integer max = arbol.findMax();
        
        System.out.println("üìä Valores extremos:");
        System.out.println("   ‚Ä¢ M√≠nimo: " + min + " (nodo m√°s a la izquierda)");
        System.out.println("   ‚Ä¢ M√°ximo: " + max + " (nodo m√°s a la derecha)");
        
        System.out.println("\nEstructura del √°rbol:");
        arbol.display();
    }
    
    private static void mostrarEstadisticas() {
        System.out.println("=== ESTAD√çSTICAS DEL √ÅRBOL ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("üìä INFORMACI√ìN GENERAL:");
        System.out.println("   ‚Ä¢ Total de nodos:    " + arbol.countNodes());
        System.out.println("   ‚Ä¢ Nodos hoja:        " + arbol.countLeaves());
        System.out.println("   ‚Ä¢ Nodos internos:    " + (arbol.countNodes() - arbol.countLeaves()));
        System.out.println("   ‚Ä¢ Altura del √°rbol:  " + arbol.getHeight());
        System.out.println("   ‚Ä¢ Valor m√≠nimo:      " + arbol.findMinValue());
        System.out.println("   ‚Ä¢ Valor m√°ximo:      " + arbol.findMax());
        System.out.println();
        
        System.out.println("üìã RECORRIDO INORDEN (ordenado):");
        System.out.println("   " + arbol.inOrderTraversal());
        System.out.println();
        
        System.out.println("üîç PROPIEDADES:");
        System.out.println("   ‚Ä¢ ¬øEs un BST v√°lido? " + (arbol.isValidBST() ? "‚úÖ S√≠" : "‚ùå No"));
        System.out.println("   ‚Ä¢ ¬øEst√° vac√≠o?       " + (arbol.isEmpty() ? "S√≠" : "No"));
        
        // Calcular factor de balance aproximado
        double alturaIdeal = Math.log(arbol.countNodes() + 1) / Math.log(2);
        double eficiencia = (alturaIdeal / arbol.getHeight()) * 100;
        System.out.println("   ‚Ä¢ Eficiencia:        " + String.format("%.1f%%", eficiencia));
        
        if (eficiencia < 70) {
            System.out.println("   ‚ö†Ô∏è El √°rbol est√° algo desbalanceado");
        }
    }
    
    private static void visualizarArbol() {
        System.out.println("=== VISUALIZACI√ìN DEL √ÅRBOL ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Estructura completa del BST:");
        System.out.println();
        arbol.display();
        
        System.out.println("\nüìä Informaci√≥n r√°pida:");
        System.out.println("   Nodos: " + arbol.countNodes() + " | Altura: " + arbol.getHeight() + 
                         " | Hojas: " + arbol.countLeaves());
    }
    
    private static void verificarValidez() {
        System.out.println("=== VERIFICAR VALIDEZ DEL BST ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol est√° vac√≠o");
            return;
        }
        
        System.out.println("Verificando propiedades del Binary Search Tree...");
        System.out.println();
        
        boolean esValido = arbol.isValidBST();
        
        if (esValido) {
            System.out.println("‚úÖ El √°rbol ES un BST v√°lido");
            System.out.println();
            System.out.println("Cumple con las propiedades:");
            System.out.println("   ‚Ä¢ Todos los valores del sub√°rbol izquierdo son menores que la ra√≠z");
            System.out.println("   ‚Ä¢ Todos los valores del sub√°rbol derecho son mayores que la ra√≠z");
            System.out.println("   ‚Ä¢ Esta propiedad se cumple recursivamente para cada sub√°rbol");
        } else {
            System.out.println("‚ùå El √°rbol NO es un BST v√°lido");
            System.out.println("   (No cumple con alguna propiedad del BST)");
        }
        
        System.out.println("\nRecorrido inorden (debe estar ordenado): " + arbol.inOrderTraversal());
    }
    
    private static void insertarMultiplesValores() {
        System.out.println("=== INSERTAR M√öLTIPLES VALORES ===\n");
        
        System.out.println("Opciones:");
        System.out.println("1. Ingresar valores manualmente");
        System.out.println("2. Generar valores aleatorios");
        System.out.println();
        
        int opcion = InputValidator.leerEnteroEnRango("Seleccione una opci√≥n (1-2): ", 1, 2);
        
        if (opcion == 1) {
            System.out.println("\nIngrese los valores separados por espacios (ej: 50 30 70 20 40):");
            scanner.nextLine(); // Limpiar buffer
            String linea = scanner.nextLine();
            
            String[] partes = linea.trim().split("\\s+");
            int insertados = 0;
            int duplicados = 0;
            
            for (String parte : partes) {
                try {
                    int valor = Integer.parseInt(parte);
                    if (arbol.insert(valor)) {
                        insertados++;
                    } else {
                        duplicados++;
                    }
                } catch (NumberFormatException e) {
                    System.out.println("‚ö†Ô∏è Ignorando valor inv√°lido: " + parte);
                }
            }
            
            System.out.println("\n‚úÖ Valores insertados: " + insertados);
            if (duplicados > 0) {
                System.out.println("‚ö†Ô∏è Valores duplicados ignorados: " + duplicados);
            }
        } else {
            int cantidad = InputValidator.leerEnteroEnRango("\n¬øCu√°ntos valores aleatorios desea generar? ", 1, 50);
            int min = InputValidator.leerEntero("Valor m√≠nimo: ");
            int max = InputValidator.leerEnteroEnRango("Valor m√°ximo: ", min + 1, Integer.MAX_VALUE);
            
            int insertados = 0;
            for (int i = 0; i < cantidad; i++) {
                int valor = min + (int)(Math.random() * (max - min + 1));
                if (arbol.insert(valor)) {
                    insertados++;
                }
            }
            
            System.out.println("\n‚úÖ Valores √∫nicos insertados: " + insertados + " de " + cantidad + " intentos");
        }
        
        System.out.println("\n√Årbol resultante:");
        arbol.display();
    }
    
    private static void limpiarArbol() {
        System.out.println("=== LIMPIAR √ÅRBOL ===\n");
        
        if (arbol.isEmpty()) {
            System.out.println("‚ö†Ô∏è El √°rbol ya est√° vac√≠o");
            return;
        }
        
        System.out.println("Estado actual: " + arbol.getSize() + " nodos");
        System.out.print("\n¬øEst√° seguro que desea eliminar todos los nodos? (S/N): ");
        scanner.nextLine(); // Limpiar buffer
        String respuesta = scanner.nextLine().trim().toUpperCase();
        
        if (respuesta.equals("S") || respuesta.equals("SI") || respuesta.equals("S√ç")) {
            arbol.clear();
            System.out.println("\n‚úÖ √Årbol limpiado correctamente");
        } else {
            System.out.println("\n‚ùå Operaci√≥n cancelada");
        }
    }
    
    private static void demostrarOperaciones() {
        System.out.println("=== DEMOSTRACI√ìN COMPLETA DEL BST ===\n");
        
        // Limpiar √°rbol anterior
        arbol.clear();
        
        System.out.println("Se crear√° un √°rbol con los valores: 50, 30, 70, 20, 40, 60, 80");
        System.out.println("Presione Enter para continuar...");
        scanner.nextLine();
        
        // Insertar valores
        System.out.println("\n--- PASO 1: INSERCI√ìN ---");
        int[] valores = {50, 30, 70, 20, 40, 60, 80};
        for (int valor : valores) {
            arbol.insert(valor);
            System.out.println("Insertando " + valor + "...");
        }
        System.out.println("\n‚úÖ √Årbol creado:");
        arbol.display();
        
        System.out.println("\nPresione Enter para continuar...");
        scanner.nextLine();
        
        // Mostrar recorridos
        System.out.println("\n--- PASO 2: RECORRIDOS ---");
        System.out.println("Inorden (ascendente): " + arbol.inOrderTraversal());
        System.out.println("Preorden:             " + arbol.preOrderTraversal());
        System.out.println("Postorden:            " + arbol.postOrderTraversal());
        System.out.println("Por niveles:          " + arbol.levelOrderTraversal());
        
        System.out.println("\nPresione Enter para continuar...");
        scanner.nextLine();
        
        // B√∫squedas
        System.out.println("\n--- PASO 3: B√öSQUEDAS ---");
        System.out.println("Buscar 40: " + (arbol.search(40) ? "‚úÖ Encontrado" : "‚ùå No encontrado"));
        System.out.println("Buscar 90: " + (arbol.search(90) ? "‚úÖ Encontrado" : "‚ùå No encontrado"));
        System.out.println("M√≠nimo: " + arbol.findMinValue());
        System.out.println("M√°ximo: " + arbol.findMax());
        
        System.out.println("\nPresione Enter para continuar...");
        scanner.nextLine();
        
        // Eliminar
        System.out.println("\n--- PASO 4: ELIMINACI√ìN ---");
        System.out.println("Eliminando el valor 30 (nodo con dos hijos)...");
        arbol.delete(30);
        System.out.println("\n‚úÖ √Årbol despu√©s de eliminar 30:");
        arbol.display();
        
        System.out.println("\nPresione Enter para continuar...");
        scanner.nextLine();
        
        // Estad√≠sticas finales
        System.out.println("\n--- PASO 5: ESTAD√çSTICAS FINALES ---");
        System.out.println("Total de nodos:  " + arbol.countNodes());
        System.out.println("Nodos hoja:      " + arbol.countLeaves());
        System.out.println("Altura:          " + arbol.getHeight());
        System.out.println("¬øEs BST v√°lido?  " + (arbol.isValidBST() ? "‚úÖ S√≠" : "‚ùå No"));
        
        System.out.println("\nüéâ Demostraci√≥n completada!");
    }
}
