package views;

import core.estructuras.monticulo.MonticuloBinario;
import core.estructuras.monticulo.MonticuloBinario.TipoMonticulo;
import core.utils.InputValidator;
import core.utils.MenuFormatter;

/**
 * Men√∫ interactivo para Mont√≠culo Binario (Binary Heap).
 * 
 * @author JhelixT
 * @version 1.0
 */
public class MonticuloMenu {
    
    private MonticuloBinario<Integer> monticulo;
    
    public MonticuloMenu() {
        this.monticulo = new MonticuloBinario<>(TipoMonticulo.MIN_HEAP);
    }
    
    public void mostrarMenu() {
        boolean continuar = true;
        
        while (continuar) {
            MenuFormatter.limpiarPantalla();
            
            System.out.println("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
            System.out.println("‚ïë                    MONT√çCULO BINARIO (BINARY HEAP)                ‚ïë");
            System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïë  ESTADO ACTUAL:                                                    ‚ïë");
            System.out.println("‚ïë  Tipo: " + String.format("%-60s", monticulo.getTipo()) + " ‚ïë");
            System.out.println("‚ïë  Tama√±o: " + String.format("%-58d", monticulo.size()) + " ‚ïë");
            System.out.println("‚ïë  Ra√≠z: " + String.format("%-60s", 
                monticulo.isEmpty() ? "vac√≠o" : monticulo.peek()) + " ‚ïë");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïë  üìö OPERACIONES B√ÅSICAS                                            ‚ïë");
            System.out.println("‚ïë   1. Insertar elemento (add)                                       ‚ïë");
            System.out.println("‚ïë   2. Eliminar ra√≠z (poll)                                          ‚ïë");
            System.out.println("‚ïë   3. Consultar ra√≠z (peek)                                         ‚ïë");
            System.out.println("‚ïë   4. Verificar si est√° vac√≠o                                       ‚ïë");
            System.out.println("‚ïë   5. Limpiar mont√≠culo                                             ‚ïë");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïë  üîß OPERACIONES AVANZADAS                                          ‚ïë");
            System.out.println("‚ïë   6. Construir heap desde arreglo (heapify)                        ‚ïë");
            System.out.println("‚ïë   7. Cambiar tipo (Min-Heap ‚Üî Max-Heap)                           ‚ïë");
            System.out.println("‚ïë   8. Verificar validez del heap                                    ‚ïë");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïë  üìä VISUALIZACI√ìN                                                  ‚ïë");
            System.out.println("‚ïë   9. Mostrar estructura completa                                   ‚ïë");
            System.out.println("‚ïë  10. Mostrar elementos como arreglo                                ‚ïë");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïë  üéØ DEMOS                                                          ‚ïë");
            System.out.println("‚ïë  11. Demo: Inserci√≥n paso a paso                                   ‚ïë");
            System.out.println("‚ïë  12. Demo: Cola de prioridad                                       ‚ïë");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïë   0. Volver al men√∫ principal                                      ‚ïë");
            System.out.println("‚ïë                                                                    ‚ïë");
            System.out.println("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
            
            int opcion = InputValidator.leerEnteroEnRango("\nSeleccione una opci√≥n: ", 0, 12);
            
            MenuFormatter.limpiarPantalla();
            
            switch (opcion) {
                case 1 -> insertarElemento();
                case 2 -> eliminarRaiz();
                case 3 -> consultarRaiz();
                case 4 -> verificarVacio();
                case 5 -> limpiarMonticulo();
                case 6 -> construirDesdeArreglo();
                case 7 -> cambiarTipo();
                case 8 -> verificarValidez();
                case 9 -> mostrarEstructura();
                case 10 -> mostrarArreglo();
                case 11 -> demoInsercionPasoAPaso();
                case 12 -> demoColaPrioridad();
                case 0 -> {
                    continuar = false;
                    System.out.println("\nüëã Volviendo al men√∫ principal...\n");
                }
                default -> System.out.println("\n‚ùå Opci√≥n no v√°lida\n");
            }
            
            if (continuar && opcion != 0) {
                InputValidator.pausar();
            }
        }
    }
    
    private void insertarElemento() {
        System.out.println("‚ïê‚ïê‚ïê INSERTAR ELEMENTO ‚ïê‚ïê‚ïê\n");
        
        int valor = InputValidator.leerEntero("Ingrese el valor a insertar: ");
        
        System.out.println("\nAntes de insertar:");
        System.out.println(monticulo);
        
        monticulo.add(valor);
        
        System.out.println("\nDespu√©s de insertar " + valor + ":");
        System.out.println(monticulo);
        System.out.println("\n‚úÖ Elemento insertado correctamente");
    }
    
    private void eliminarRaiz() {
        System.out.println("‚ïê‚ïê‚ïê ELIMINAR RA√çZ ‚ïê‚ïê‚ïê\n");
        
        if (monticulo.isEmpty()) {
            System.out.println("‚ùå El mont√≠culo est√° vac√≠o");
            return;
        }
        
        System.out.println("Antes de eliminar:");
        System.out.println(monticulo);
        
        Integer eliminado = monticulo.poll();
        
        System.out.println("\nElemento eliminado: " + eliminado);
        System.out.println("\nDespu√©s de eliminar:");
        System.out.println(monticulo);
    }
    
    private void consultarRaiz() {
        System.out.println("‚ïê‚ïê‚ïê CONSULTAR RA√çZ ‚ïê‚ïê‚ïê\n");
        
        if (monticulo.isEmpty()) {
            System.out.println("‚ùå El mont√≠culo est√° vac√≠o");
        } else {
            System.out.println("Ra√≠z actual: " + monticulo.peek());
            System.out.println("(" + (monticulo.getTipo() == TipoMonticulo.MIN_HEAP ? "m√≠nimo" : "m√°ximo") + ")");
        }
    }
    
    private void verificarVacio() {
        System.out.println("‚ïê‚ïê‚ïê VERIFICAR VAC√çO ‚ïê‚ïê‚ïê\n");
        
        if (monticulo.isEmpty()) {
            System.out.println("‚úÖ El mont√≠culo est√° vac√≠o");
        } else {
            System.out.println("‚ùå El mont√≠culo NO est√° vac√≠o");
            System.out.println("Tama√±o actual: " + monticulo.size());
        }
    }
    
    private void limpiarMonticulo() {
        System.out.println("‚ïê‚ïê‚ïê LIMPIAR MONT√çCULO ‚ïê‚ïê‚ïê\n");
        
        if (monticulo.isEmpty()) {
            System.out.println("El mont√≠culo ya est√° vac√≠o");
        } else {
            System.out.println("Tama√±o antes: " + monticulo.size());
            monticulo.clear();
            System.out.println("Tama√±o despu√©s: " + monticulo.size());
            System.out.println("\n‚úÖ Mont√≠culo limpiado");
        }
    }
    
    private void construirDesdeArreglo() {
        System.out.println("‚ïê‚ïê‚ïê CONSTRUIR HEAP DESDE ARREGLO ‚ïê‚ïê‚ïê\n");
        
        System.out.println("Ingrese n√∫meros separados por espacios:");
        System.out.println("Ejemplo: 20 5 15 3 11");
        String input = InputValidator.leerCadenaNoVacia("> ");
        
        String[] partes = input.trim().split("\\s+");
        Integer[] elementos = new Integer[partes.length];
        
        try {
            for (int i = 0; i < partes.length; i++) {
                elementos[i] = Integer.parseInt(partes[i]);
            }
            
            System.out.println("\nArreglo original: ");
            for (Integer e : elementos) {
                System.out.print(e + " ");
            }
            
            monticulo.buildHeap(elementos);
            
            System.out.println("\n\nHeap construido:");
            System.out.println(monticulo);
            System.out.println("Elementos: " + monticulo.getElements());
            System.out.println("\n‚úÖ Heap construido en O(n)");
            
        } catch (NumberFormatException e) {
            System.out.println("\n‚ùå Error: Ingrese solo n√∫meros v√°lidos");
        }
    }
    
    private void cambiarTipo() {
        System.out.println("‚ïê‚ïê‚ïê CAMBIAR TIPO DE MONT√çCULO ‚ïê‚ïê‚ïê\n");
        
        TipoMonticulo tipoActual = monticulo.getTipo();
        System.out.println("Tipo actual: " + tipoActual);
        
        if (monticulo.isEmpty()) {
            TipoMonticulo nuevoTipo = (tipoActual == TipoMonticulo.MIN_HEAP) 
                ? TipoMonticulo.MAX_HEAP : TipoMonticulo.MIN_HEAP;
            monticulo = new MonticuloBinario<>(nuevoTipo);
            System.out.println("Nuevo tipo: " + nuevoTipo);
            System.out.println("\n‚úÖ Tipo cambiado");
        } else {
            System.out.println("\n‚ö†Ô∏è  Para cambiar el tipo, primero debe limpiar el mont√≠culo");
            if (InputValidator.confirmar("¬øDesea limpiar y cambiar el tipo?")) {
                TipoMonticulo nuevoTipo = (tipoActual == TipoMonticulo.MIN_HEAP) 
                    ? TipoMonticulo.MAX_HEAP : TipoMonticulo.MIN_HEAP;
                monticulo = new MonticuloBinario<>(nuevoTipo);
                System.out.println("\n‚úÖ Tipo cambiado a: " + nuevoTipo);
            }
        }
    }
    
    private void verificarValidez() {
        System.out.println("‚ïê‚ïê‚ïê VERIFICAR VALIDEZ ‚ïê‚ïê‚ïê\n");
        
        boolean valido = monticulo.isValidHeap();
        
        System.out.println("Tipo: " + monticulo.getTipo());
        System.out.println("Tama√±o: " + monticulo.size());
        
        if (valido) {
            System.out.println("\n‚úÖ El heap es v√°lido");
            System.out.println("Cumple con la propiedad de " + 
                (monticulo.getTipo() == TipoMonticulo.MIN_HEAP ? "m√≠nimo" : "m√°ximo"));
        } else {
            System.out.println("\n‚ùå El heap NO es v√°lido");
        }
    }
    
    private void mostrarEstructura() {
        System.out.println("‚ïê‚ïê‚ïê ESTRUCTURA COMPLETA ‚ïê‚ïê‚ïê\n");
        
        if (monticulo.isEmpty()) {
            System.out.println("El mont√≠culo est√° vac√≠o");
        } else {
            monticulo.display();
            System.out.println("\nAltura: " + monticulo.getHeight());
        }
    }
    
    private void mostrarArreglo() {
        System.out.println("‚ïê‚ïê‚ïê REPRESENTACI√ìN COMO ARREGLO ‚ïê‚ïê‚ïê\n");
        
        if (monticulo.isEmpty()) {
            System.out.println("El mont√≠culo est√° vac√≠o");
        } else {
            System.out.println("Elementos (√≠ndices desde 1):");
            var elementos = monticulo.getElements();
            for (int i = 0; i < elementos.size(); i++) {
                System.out.println("  [" + (i + 1) + "] = " + elementos.get(i));
            }
            
            System.out.println("\nRelaciones padre-hijo:");
            for (int i = 1; i <= elementos.size() / 2; i++) {
                System.out.print("  Nodo [" + i + "] = " + elementos.get(i - 1));
                
                int left = 2 * i;
                int right = 2 * i + 1;
                
                if (left <= elementos.size()) {
                    System.out.print(" ‚Üí hijo izq [" + left + "] = " + elementos.get(left - 1));
                }
                if (right <= elementos.size()) {
                    System.out.print(", hijo der [" + right + "] = " + elementos.get(right - 1));
                }
                System.out.println();
            }
        }
    }
    
    private void demoInsercionPasoAPaso() {
        System.out.println("‚ïê‚ïê‚ïê DEMO: INSERCI√ìN PASO A PASO ‚ïê‚ïê‚ïê\n");
        System.out.println("Insertaremos los valores: 20, 5, 15, 3, 11\n");
        
        monticulo = new MonticuloBinario<>(TipoMonticulo.MIN_HEAP);
        int[] valores = {20, 5, 15, 3, 11};
        
        for (int valor : valores) {
            System.out.println("\n‚îÄ‚îÄ‚îÄ Insertando " + valor + " ‚îÄ‚îÄ‚îÄ");
            monticulo.add(valor);
            System.out.println("Arreglo: " + monticulo.getElements());
            monticulo.display();
            InputValidator.pausar();
        }
        
        System.out.println("\n‚úÖ Demo completada");
        System.out.println("El m√≠nimo siempre est√° en la ra√≠z: " + monticulo.peek());
    }
    
    private void demoColaPrioridad() {
        System.out.println("‚ïê‚ïê‚ïê DEMO: COLA DE PRIORIDAD ‚ïê‚ïê‚ïê\n");
        System.out.println("Simulando sistema de atenci√≥n por prioridad");
        System.out.println("(n√∫meros menores = mayor prioridad)\n");
        
        monticulo = new MonticuloBinario<>(TipoMonticulo.MIN_HEAP);
        
        System.out.println("Llegada de pacientes:");
        String[] pacientes = {"Urgencia (prioridad 1)", "Consulta (prioridad 5)", 
                              "Emergencia (prioridad 0)", "Revisi√≥n (prioridad 3)"};
        int[] prioridades = {1, 5, 0, 3};
        
        for (int i = 0; i < pacientes.length; i++) {
            System.out.println("  ‚Üí " + pacientes[i]);
            monticulo.add(prioridades[i]);
        }
        
        System.out.println("\nOrden de atenci√≥n:");
        int orden = 1;
        while (!monticulo.isEmpty()) {
            int prioridad = monticulo.poll();
            String tipo = switch (prioridad) {
                case 0 -> "Emergencia";
                case 1 -> "Urgencia";
                case 3 -> "Revisi√≥n";
                case 5 -> "Consulta";
                default -> "Desconocido";
            };
            System.out.println("  " + orden++ + ". " + tipo + " (prioridad " + prioridad + ")");
        }
        
        System.out.println("\n‚úÖ Cola de prioridad procesada correctamente");
    }
}
